{
    "docs": [
        {
            "location": "/",
            "text": "Index\n\n\n\n\nAction and Filter Hooks\n\n\nList of action and filter hooks\n\n\nExamples\n\n\n\n\n\n\nHow To ?\n\n\n\n\n\n\nThis is a partial documentation of \nUserMetaPro\n plugin.\nFor full documentation visit \nhttp://user-meta.com/documentation/\n.\n\n\nUserMetaPro\n is a WordPress plugin for users management.",
            "title": "Home"
        },
        {
            "location": "/#index",
            "text": "Action and Filter Hooks  List of action and filter hooks  Examples    How To ?    This is a partial documentation of  UserMetaPro  plugin.\nFor full documentation visit  http://user-meta.com/documentation/ .  UserMetaPro  is a WordPress plugin for users management.",
            "title": "Index"
        },
        {
            "location": "/hooks/list/",
            "text": "Action and Filter Hooks\n\n\nList of available action and filter hooks supported by \nUserMetaPro\n.\n\n\nForms and Fields\n\n\n\n\n\n\nAction Hook: \nuser_meta_before_form\n \n\nRuns when generating form. Calling just before \n<form>\n tag. \n\n\nParameter:\n \n(string) $formName\n\n\n\n\n\n\n\n\nAction Hook: \nuser_meta_after_form\n \n\nRuns when generating form. Calling just after \n<form>\n tag.\n\n\nParameter:\n \n(string) $formName\n\n\n\n\n\n\n\n\nFilter Hook: \nuser_meta_form_config\n  \n\nCan be modify forms data by calling this filter hook.\n\n\nParameter:\n \n(array) $formData, (string) $formName\n\n\n\n\n\n\n\n\nFilter Hook:\n\nuser_meta_field_config\n \n\nCan be modify fields data by calling this filter hook.\n\n\nParameter:\n \n(array) $formData, (int) $fieldID, (string) $formName\n\n\n\n\n\n\n\n\nFilter Hook: \nuser_meta_field_display\n \n\nApplied to field html before browser output.\n\n\nParameter:\n \n(string) $html, (int) $fieldID, (string) $formName, (array) $formData\n\n\n\n\n\n\n\n\nFilter Hook: \nuser_meta_form_display\n \n\nApplied to form html before browser output.\n\n\nParameter:\n \n(string) $html, (string) $formName, (array) $formData\n\n\n\n\n\n\nUser Registration\n\n\n\n\n\n\nFliter Hook: \nuser_meta_pre_user_register\n \n\nThis filter can be used to modify user data before user registration.\n\n\nParameter:\n \n(array) $userData\n\n\n\n\n\n\n\n\nAction Hook: \nuser_meta_after_user_register\n \n\nThis action will run immediately after user registration.\n\n\nParameter:\n \n(object) $response\n\n\n\n\n\n\n\n\nUser Profile Update\n\n\n\n\n\n\nFliter Hook: \nuser_meta_pre_user_update\n \n\nThis filter can be used to modify user data before user profile update.\n\n\nParameter:\n \n(array) $userData\n\n\n\n\n\n\n\n\nAction Hook: \nuser_meta_after_user_update\n \n\nRuns when user update their profile.\n\n\nParameter:\n \n(object) $response\n\n\n\n\n\n\n\n\nUser Activation/Deactivation\n\n\n\n\n\n\nAction Hook: \nuser_meta_user_activate\n \n\nRuns when user activated.\n\n\nParameter:\n \n(int) $userID\n\n\n\n\n\n\n\n\nAction Hook: \nuser_meta_user_deactivate\n \n\nRuns when user deactivated.\n\n\nParameter:\n \n(int) $userID\n\n\n\n\n\n\n\n\nEmail Verification\n\n\n\n\nAction Hook: \nuser_meta_email_verified\n \n\nRuns when user verified their email.\n\n\nParameter:\n \n(int) $userID\n\n\n\n\nRedirection\n\n\n\n\n\n\nFilter Hook: \nlogin_redirect\n \n\nCan be used to change login redirection url.\n\n\nParameter:\n \n(string) $url, (string) $request_url, (WP_User | WP_Error) $user\n  \n\n\n\n\n\n\n\n\nFilter Hook: \nlogout_redirect\n \n\nCan be used to change login redirection url.\n\n\nParameter:\n \n(string) $url, (string) $request_url, (WP_User) $user\n\n\n\n\n\n\n\n\nFilter Hook: \nregistration_redirect\n \n\nCan be used to change login redirection url.\n\n\nParameter:\n \n(string) $url, (int) $userID\n\n\n\n\n\n\nNote\n: By default, all redirection filters is disabled. To enable them use \nuser_meta_wp_hook\n filter.\n\n\nUser Export\n\n\n\n\n\n\nFilter Hook: \nuser_meta_user_export_filename\n (since 1.2)\n\nChange file name of exported csv file.\n\n\nParameter:\n \n(string) $fileName\n\n\n\n\n\n\n\n\nFilter Hook: \nuser_meta_user_export_csv_delimiter\n (since 1.2)\n\nChange default delimiter \n,\n\n\nParameter:\n \n(string) $delimiter\n\n\n\n\n\n\n\n\nFilter Hook: \nuser_meta_user_export_csv_enclosure\n (since 1.2)\n\nChange default enclosure \n\"\n\n\nParameter:\n \n(string) $enclosure\n\n\n\n\n\n\n\n\nFilter Hook: \nuser_meta_user_export_label\n (since 1.2)\n\nChange label of csv file (first row).\n\n\nParameter:\n \n(array) fields\n\n\n\n\n\n\n\n\nFilter Hook: \nuser_meta_user_export_fields\n (since 1.2)\n\nChange field value of exported file.\n\n\nParameter:\n \n(array) $userData, (WP_User) $user\n\n\n\n\n\n\nMisc\n\n\n\n\n\n\nFilter Hook: \nuser_meta_msg\n \n\nMessage text can be changed by this filter.\n\n\nParameter:\n \n(string) $message, (string) $key\n\n\n\n\n\n\n\n\nFilter Hook: user_meta_wp_hook\n (since 1.1.6)\n\nEnable or disable conflicted hooks.\n\n\nParameter:\n \n(boolean) $enable, (string) $hookName, (array) $args",
            "title": "List of action and filter hooks"
        },
        {
            "location": "/hooks/list/#action-and-filter-hooks",
            "text": "List of available action and filter hooks supported by  UserMetaPro .",
            "title": "Action and Filter Hooks"
        },
        {
            "location": "/hooks/list/#forms-and-fields",
            "text": "Action Hook:  user_meta_before_form   \nRuns when generating form. Calling just before  <form>  tag.   Parameter:   (string) $formName     Action Hook:  user_meta_after_form   \nRuns when generating form. Calling just after  <form>  tag.  Parameter:   (string) $formName     Filter Hook:  user_meta_form_config    \nCan be modify forms data by calling this filter hook.  Parameter:   (array) $formData, (string) $formName     Filter Hook: user_meta_field_config   \nCan be modify fields data by calling this filter hook.  Parameter:   (array) $formData, (int) $fieldID, (string) $formName     Filter Hook:  user_meta_field_display   \nApplied to field html before browser output.  Parameter:   (string) $html, (int) $fieldID, (string) $formName, (array) $formData     Filter Hook:  user_meta_form_display   \nApplied to form html before browser output.  Parameter:   (string) $html, (string) $formName, (array) $formData",
            "title": "Forms and Fields"
        },
        {
            "location": "/hooks/list/#user-registration",
            "text": "Fliter Hook:  user_meta_pre_user_register   \nThis filter can be used to modify user data before user registration.  Parameter:   (array) $userData     Action Hook:  user_meta_after_user_register   \nThis action will run immediately after user registration.  Parameter:   (object) $response",
            "title": "User Registration"
        },
        {
            "location": "/hooks/list/#user-profile-update",
            "text": "Fliter Hook:  user_meta_pre_user_update   \nThis filter can be used to modify user data before user profile update.  Parameter:   (array) $userData     Action Hook:  user_meta_after_user_update   \nRuns when user update their profile.  Parameter:   (object) $response",
            "title": "User Profile Update"
        },
        {
            "location": "/hooks/list/#user-activationdeactivation",
            "text": "Action Hook:  user_meta_user_activate   \nRuns when user activated.  Parameter:   (int) $userID     Action Hook:  user_meta_user_deactivate   \nRuns when user deactivated.  Parameter:   (int) $userID",
            "title": "User Activation/Deactivation"
        },
        {
            "location": "/hooks/list/#email-verification",
            "text": "Action Hook:  user_meta_email_verified   \nRuns when user verified their email.  Parameter:   (int) $userID",
            "title": "Email Verification"
        },
        {
            "location": "/hooks/list/#redirection",
            "text": "Filter Hook:  login_redirect   \nCan be used to change login redirection url.  Parameter:   (string) $url, (string) $request_url, (WP_User | WP_Error) $user        Filter Hook:  logout_redirect   \nCan be used to change login redirection url.  Parameter:   (string) $url, (string) $request_url, (WP_User) $user     Filter Hook:  registration_redirect   \nCan be used to change login redirection url.  Parameter:   (string) $url, (int) $userID    Note : By default, all redirection filters is disabled. To enable them use  user_meta_wp_hook  filter.",
            "title": "Redirection"
        },
        {
            "location": "/hooks/list/#user-export",
            "text": "Filter Hook:  user_meta_user_export_filename  (since 1.2) \nChange file name of exported csv file.  Parameter:   (string) $fileName     Filter Hook:  user_meta_user_export_csv_delimiter  (since 1.2) \nChange default delimiter  ,  Parameter:   (string) $delimiter     Filter Hook:  user_meta_user_export_csv_enclosure  (since 1.2) \nChange default enclosure  \"  Parameter:   (string) $enclosure     Filter Hook:  user_meta_user_export_label  (since 1.2) \nChange label of csv file (first row).  Parameter:   (array) fields     Filter Hook:  user_meta_user_export_fields  (since 1.2) \nChange field value of exported file.  Parameter:   (array) $userData, (WP_User) $user",
            "title": "User Export"
        },
        {
            "location": "/hooks/list/#misc",
            "text": "Filter Hook:  user_meta_msg   \nMessage text can be changed by this filter.  Parameter:   (string) $message, (string) $key     Filter Hook: user_meta_wp_hook  (since 1.1.6) \nEnable or disable conflicted hooks.  Parameter:   (boolean) $enable, (string) $hookName, (array) $args",
            "title": "Misc"
        },
        {
            "location": "/hooks/examples/",
            "text": "Examples of action or filter hooks\n\n\nuser_meta_field_config (filter)\n\n\nThis filter hook can be use to modify fields data.\n\n\nSince:\n 1.1.3\n\n\nParameter:\n \n(array) $formData, (int) $fieldID, (string) $formName\n\n\nSupported array key for $formData:\n\n\nfield_title\n \u2013 Field Title.\n\n\nfield_type\n \u2013 Type of html input (e.g. checkbox, text, hidden, select).\n\n\nfield_name\n \u2013 Name of the field.\n\n\nfield_value\n \u2013 Retrieved value of the field.\n\n\ndefault_value\n \u2013 Assign a default value when field_value is empty.\n\n\ntitle_position\n \u2013 Supported value: top, left, right, inline, hidden (default: top).\n\n\ndescription\n \u2013 Description of the field.\n\n\nmeta_key\n \u2013 Should use only for extra fields.\n\n\noptions\n \u2013 (string | array) Populate options for dropdown, checkbox and radio field.\n\n\nmax_char\n \u2013 Allowed maximim character.\n\n\nfield_size\n \u2013 Field size in pixel (e.g. 200px).\n\n\nbefore\n \u2013 Content before field.\n\n\nafter\n \u2013 Content after field.\n\n\nrequired\n \u2013 Indicate field as required.\n\n\nunique\n \u2013 Indicate field as unique.\n\n\nadmin_only\n \u2013 If set, the field is accessible only for admin.\n\n\nnon_admin_only\n \u2013 Only viewable for non-admin\n\n\nread_only\n \u2013 If set, read only for all user.\n\n\nread_only_non_admin\n \u2013 If set, the field will be read only for non-admin user.\n\n\ncss_class\n \u2013 Css class for field container.\n\n\ncss_style\n \u2013 Inline css style for field container.\n\n\ninput_id\n \u2013 Input id for field itself.\n\n\nfield_class\n \u2013 Assign class to field itself.\n\n\nfield_style\n \u2013 Assign inline css stye for field itself.\n\n\nlabel_id\n \u2013 Label ID.\n\n\nlabel_class\n \u2013 Assign class to field label.\n\n\ndescription_id\n \u2013 ID attribute for description paragraph.\n\n\ndescription_class\n \u2013 Assign class to field description.\n\n\ndescription_style\n \u2013 Assign inline css style for field description.  \n\n\nExamples:\n\n\nAssign css class to field:\n\n\nadd_filter( 'user_meta_field_config', 'user_meta_field_config_function', 10, 3 );\nfunction user_meta_field_config_function( $field, $fieldID, $formName ){    \n    if( $fieldID != 'Enter field id that you need to control' )\n        return $field;\n\n    $field['field_class'] = 'class1 class2';\n\n    return $field;\n}\n\n\n\n\nUse comma in option:\n\n\nadd_filter( 'user_meta_field_config', 'user_meta_field_config_function', 10, 3 );\nfunction user_meta_field_config_function( $field, $fieldID, $formName ){        \n    if( $fieldID != 'Your field id here' )\n        return $field;\n\n    $field['options'] = \"yes=Yes, Agree, no=No, Disagree\";\n\n    return $field;\n}\n\n\n\n\nNote\n: Use ascii code of comma where you want to appear it. \nasciitable\n\n\nUser Registration\n\n\nuser_meta_pre_user_register (filter)\n\n\nSince:\n 1.1.2  \n\n\nMore validation before user registration:\n\n\nadd_filter( 'user_meta_pre_user_register', 'user_meta_pre_user_register_function' );\nfunction user_meta_pre_user_register_function( $userData ){\n    // Write your code for more validation before user register.\n    // return WP_Error object if there are any error or validation failed.\n\n    return $userData;\n}\n\n\n\n\nAdd more extra data to usermeta table:\n\n\nadd_filter( 'user_meta_pre_user_register', 'user_meta_pre_user_register_function' );\nfunction user_meta_pre_user_register_function( $userData ){\n    // You can add some conditionl metadata\n    $userData[ 'new_meta_key' ] = 'New Meta Value';\n\n    return $userData;\n}\n\n\n\n\nuser_meta_after_user_register (action)\n\n\nSince:\n 1.1.2\n\n\nExample:\n\n\nadd_action( 'user_meta_after_user_register', 'user_meta_after_user_register_function' );\nfunction user_meta_after_user_register_function( $response ){\n    $userID = $response->ID;\n    // Your code goes here\n}\n\n\n\n\nUser Export\n\n\nuser_meta_user_export_filename (filter)\n\n\nSince:\n 1.2\n\n\nChanging file name:\n\n\nadd_filter( 'user_meta_user_export_filename', function( $fileName ) {\n    return 'test.csv';\n});\n\n\n\n\nuser_meta_user_export_csv_delimiter (filter)\n\n\nSince:\n 1.2\n\n\nChanging csv delimiter to \n|\n:\n\n\nadd_filter( 'user_meta_user_export_csv_delimiter', function() {\n    return '|';\n});\n\n\n\n\nuser_meta_user_export_csv_enclosure (filter)\n\n\nSince:\n 1.2\n\n\nChanging csv delimiter to \n!\n:\n\n\nadd_filter( 'user_meta_user_export_csv_enclosure', function() {\n    return '!';\n});\n\n\n\n\nuser_meta_user_export_label (filter)\n\n\nSince:\n 1.2\n\n\nChanging label of field name:\n\n\nadd_filter( 'user_meta_user_export_label', function ($fields) {\n    $fields['user_login'] = 'Renamed Username';\n\n    return $fields;\n});\n\n\n\n\nuser_meta_user_export_fields (filter)\n\n\nSince:\n 1.2\n\n\nChanging field value:\n\n\nadd_filter( 'user_meta_user_export_fields', function ( $userData, $user ) {\n    $userData['user_login'] = 'Renamed' . $user->ID;\n\n    return $userData;\n}, 10, 2);",
            "title": "Examples"
        },
        {
            "location": "/hooks/examples/#user_meta_field_config-filter",
            "text": "This filter hook can be use to modify fields data.  Since:  1.1.3  Parameter:   (array) $formData, (int) $fieldID, (string) $formName  Supported array key for $formData:  field_title  \u2013 Field Title.  field_type  \u2013 Type of html input (e.g. checkbox, text, hidden, select).  field_name  \u2013 Name of the field.  field_value  \u2013 Retrieved value of the field.  default_value  \u2013 Assign a default value when field_value is empty.  title_position  \u2013 Supported value: top, left, right, inline, hidden (default: top).  description  \u2013 Description of the field.  meta_key  \u2013 Should use only for extra fields.  options  \u2013 (string | array) Populate options for dropdown, checkbox and radio field.  max_char  \u2013 Allowed maximim character.  field_size  \u2013 Field size in pixel (e.g. 200px).  before  \u2013 Content before field.  after  \u2013 Content after field.  required  \u2013 Indicate field as required.  unique  \u2013 Indicate field as unique.  admin_only  \u2013 If set, the field is accessible only for admin.  non_admin_only  \u2013 Only viewable for non-admin  read_only  \u2013 If set, read only for all user.  read_only_non_admin  \u2013 If set, the field will be read only for non-admin user.  css_class  \u2013 Css class for field container.  css_style  \u2013 Inline css style for field container.  input_id  \u2013 Input id for field itself.  field_class  \u2013 Assign class to field itself.  field_style  \u2013 Assign inline css stye for field itself.  label_id  \u2013 Label ID.  label_class  \u2013 Assign class to field label.  description_id  \u2013 ID attribute for description paragraph.  description_class  \u2013 Assign class to field description.  description_style  \u2013 Assign inline css style for field description.    Examples:  Assign css class to field:  add_filter( 'user_meta_field_config', 'user_meta_field_config_function', 10, 3 );\nfunction user_meta_field_config_function( $field, $fieldID, $formName ){    \n    if( $fieldID != 'Enter field id that you need to control' )\n        return $field;\n\n    $field['field_class'] = 'class1 class2';\n\n    return $field;\n}  Use comma in option:  add_filter( 'user_meta_field_config', 'user_meta_field_config_function', 10, 3 );\nfunction user_meta_field_config_function( $field, $fieldID, $formName ){        \n    if( $fieldID != 'Your field id here' )\n        return $field;\n\n    $field['options'] = \"yes=Yes, Agree, no=No, Disagree\";\n\n    return $field;\n}  Note : Use ascii code of comma where you want to appear it.  asciitable",
            "title": "user_meta_field_config (filter)"
        },
        {
            "location": "/hooks/examples/#user-registration",
            "text": "",
            "title": "User Registration"
        },
        {
            "location": "/hooks/examples/#user_meta_pre_user_register-filter",
            "text": "Since:  1.1.2    More validation before user registration:  add_filter( 'user_meta_pre_user_register', 'user_meta_pre_user_register_function' );\nfunction user_meta_pre_user_register_function( $userData ){\n    // Write your code for more validation before user register.\n    // return WP_Error object if there are any error or validation failed.\n\n    return $userData;\n}  Add more extra data to usermeta table:  add_filter( 'user_meta_pre_user_register', 'user_meta_pre_user_register_function' );\nfunction user_meta_pre_user_register_function( $userData ){\n    // You can add some conditionl metadata\n    $userData[ 'new_meta_key' ] = 'New Meta Value';\n\n    return $userData;\n}",
            "title": "user_meta_pre_user_register (filter)"
        },
        {
            "location": "/hooks/examples/#user_meta_after_user_register-action",
            "text": "Since:  1.1.2  Example:  add_action( 'user_meta_after_user_register', 'user_meta_after_user_register_function' );\nfunction user_meta_after_user_register_function( $response ){\n    $userID = $response->ID;\n    // Your code goes here\n}",
            "title": "user_meta_after_user_register (action)"
        },
        {
            "location": "/hooks/examples/#user-export",
            "text": "",
            "title": "User Export"
        },
        {
            "location": "/hooks/examples/#user_meta_user_export_filename-filter",
            "text": "Since:  1.2  Changing file name:  add_filter( 'user_meta_user_export_filename', function( $fileName ) {\n    return 'test.csv';\n});",
            "title": "user_meta_user_export_filename (filter)"
        },
        {
            "location": "/hooks/examples/#user_meta_user_export_csv_delimiter-filter",
            "text": "Since:  1.2  Changing csv delimiter to  | :  add_filter( 'user_meta_user_export_csv_delimiter', function() {\n    return '|';\n});",
            "title": "user_meta_user_export_csv_delimiter (filter)"
        },
        {
            "location": "/hooks/examples/#user_meta_user_export_csv_enclosure-filter",
            "text": "Since:  1.2  Changing csv delimiter to  ! :  add_filter( 'user_meta_user_export_csv_enclosure', function() {\n    return '!';\n});",
            "title": "user_meta_user_export_csv_enclosure (filter)"
        },
        {
            "location": "/hooks/examples/#user_meta_user_export_label-filter",
            "text": "Since:  1.2  Changing label of field name:  add_filter( 'user_meta_user_export_label', function ($fields) {\n    $fields['user_login'] = 'Renamed Username';\n\n    return $fields;\n});",
            "title": "user_meta_user_export_label (filter)"
        },
        {
            "location": "/hooks/examples/#user_meta_user_export_fields-filter",
            "text": "Since:  1.2  Changing field value:  add_filter( 'user_meta_user_export_fields', function ( $userData, $user ) {\n    $userData['user_login'] = 'Renamed' . $user->ID;\n\n    return $userData;\n}, 10, 2);",
            "title": "user_meta_user_export_fields (filter)"
        },
        {
            "location": "/howto/",
            "text": "How To.. ?\n\n\nUse field title as placeholder\n\n\nTo use, field title as a placeholder, put following code to your \nfunctions.php\n\n\nadd_filter( 'user_meta_field_config', 'titleAsPlaceholder', 10, 3 );\nfunction titleAsPlaceholder( $field, $fieldID, $formName ) {\n    if ( !empty( $field['field_title'] ) )\n        $field['placeholder'] = $field['field_title'];\n\n    return $field;\n}\n\n\n\n\nBuild custom login form\n\n\nAny form can be used as login form. Create a new form for login, add Username and Password field to the form, for \u201cRemember me\u201d add a checkbox with\n\n\nMeta Key: \nremember\n\nField Options: \n1=Remember me\n\n\nCategory as options for dropdown/select/multiselect\n\n\nadd_filter( 'user_meta_field_config', 'user_meta_field_config_populate_categories', 10, 3 );\nfunction user_meta_field_config_populate_categories( $field, $fieldID, $formName ){\n\n    if( $fieldID != 'Your_Field_ID' ) // Put your desired field id here\n        return $field;\n\n    $output = null;\n    $cats = get_categories();\n    foreach( $cats as $cat ):\n        $output .= $cat->term_id.'='.$cat->name.',';\n    endforeach;\n    $output = ',' . trim( $output, ',' );\n\n    $field['options'] = $output;\n\n    return $field;\n}\n\n\n\n\nAdd red asterisk(\n*\n) to all required fields\n\n\nadd_filter( 'user_meta_field_config', 'user_meta_field_config_add_asterisk', 10, 3 );\nfunction user_meta_field_config_add_asterisk( $field, $fieldID, $formName ){     \n    if( !empty($field['required']) || in_array($field['field_type'], array('user_login', 'user_email')) ){\n        if( !empty( $field['field_title'] ) )\n            $field['field_title'] .= '<span class=\"um_required\">*</span>';\n    }\n\n    return $field;\n}\n\n\n\n\nAdd custom required class to all required fields\n\n\nadd_filter( 'user_meta_field_config', 'user_meta_field_config_add_class', 10, 3 );\nfunction user_meta_field_config_add_class( $field, $fieldID, $formName ){     \n    if( !empty($field['required']) || in_array($field['field_type'], array('user_login', 'user_email')) ){\n        $field['field_class'] = 'your_required_class '; // leave an empty space after classname\n    }\n\n    return $field;\n}\n\n\n\n\nChange resetpass page\n\n\nTo change default \u201cresetpass\u201d to \u201cverify\u201d put following codes to your \nfunctions.php\n\n\nadd_filter('user_meta_front_execution_page', create_function('','return \"verify\";'));\n\n\n\n\nCustomize label for login form\n\n\nTo customize default label for login form, edit and put following code to your \nfunctions.php\n file:\n\n\nadd_filter( 'user_meta_default_login_form', 'user_meta_default_login_form_function' );\nfunction user_meta_default_login_form_function( $config ){\n    $config['login_label']  = \"Your desire text for login input\";\n    $config['pass_label']   = \"Your desire text for password input\";\n    $config['remember_label'] = \"Your desire text for rember me checkbox\";\n    $config['button_value'] = \"Your desire text for login button\";\n\n    return $config;\n}\n\n\n\n\nRedirection after profile update\n\n\nPut following code to \nfunctions.php\n for redirecting user after profile update.\n\n\nadd_action( 'user_meta_after_user_update', 'user_meta_after_user_update_function' );\nfunction user_meta_after_user_update_function( $response ){\n    global $userMeta;\n    echo $userMeta->jsRedirect( 'http://example.com' );\n}\n\n\n\n\nExtend date range\n\n\nTo extend date range from default one use following hooks:\n\n\nadd_filter( 'user_meta_field_config', 'user_meta_field_config_function', 10, 3 );\nfunction user_meta_field_config_function( $field, $fieldID, $formName ){\n    if( $fieldID != 0 ) // Replace 0 with your filed id\n        return $field;\n    $field['field_options'] = array( \"yearRange\"=>\"1900:c\" );\n    return $field;\n}\n\n\n\n\nPlease note, you need to change field id in this example, or you can use any other algorithm to filter your field.\nYou can pass more options to control the datepicker through \n$field[\u2018field_options\u2019]\n as an array.\n\n\nUse non-ajax file upload field\n\n\nIf for any case, ajax file upload solution is not working for you, you can switch to non-ajax solution.\nTo choose non-ajax file upload, follow those steps:\n\n\n\n\n\n\nGo to \nUser Meta >> Shared Fields\n, expand your file upload field (or avatar field) and check \nDisable AJAX upload\n checkbox, save your change.\n\n\n\n\n\n\nGo to \nUser Meta >> Forms\n, expand your form and check \nDo not use AJAX submit\n checkbox and save your change.\n\n\n\n\n\n\nExport file url with user export\n\n\nBy default, UMP export relative path of file for exporting users into a csv file. To export file url, put following codes to \nfunctions.php\n.\n\n\nadd_filter('user_meta_user_export_fields', function ($userData, $user) {\n    global $userMeta;\n\n    if (!empty($userData['user_avatar'])) {\n        $file = $userMeta->determinFileDir($userData['user_avatar']);\n\n        if ($file) {\n            $userData['user_avatar'] = $file['url'];\n            // For full path, use:\n            // $userData['user_avatar'] = $file['path'];\n        }\n    }\n\n    return $userData;\n}, 10, 2);\n\n\n\n\nNote:\n Required version 1.2 or above.",
            "title": "How To ?"
        },
        {
            "location": "/howto/#how-to",
            "text": "",
            "title": "How To.. ?"
        },
        {
            "location": "/howto/#use-field-title-as-placeholder",
            "text": "To use, field title as a placeholder, put following code to your  functions.php  add_filter( 'user_meta_field_config', 'titleAsPlaceholder', 10, 3 );\nfunction titleAsPlaceholder( $field, $fieldID, $formName ) {\n    if ( !empty( $field['field_title'] ) )\n        $field['placeholder'] = $field['field_title'];\n\n    return $field;\n}",
            "title": "Use field title as placeholder"
        },
        {
            "location": "/howto/#build-custom-login-form",
            "text": "Any form can be used as login form. Create a new form for login, add Username and Password field to the form, for \u201cRemember me\u201d add a checkbox with  Meta Key:  remember \nField Options:  1=Remember me",
            "title": "Build custom login form"
        },
        {
            "location": "/howto/#category-as-options-for-dropdownselectmultiselect",
            "text": "add_filter( 'user_meta_field_config', 'user_meta_field_config_populate_categories', 10, 3 );\nfunction user_meta_field_config_populate_categories( $field, $fieldID, $formName ){\n\n    if( $fieldID != 'Your_Field_ID' ) // Put your desired field id here\n        return $field;\n\n    $output = null;\n    $cats = get_categories();\n    foreach( $cats as $cat ):\n        $output .= $cat->term_id.'='.$cat->name.',';\n    endforeach;\n    $output = ',' . trim( $output, ',' );\n\n    $field['options'] = $output;\n\n    return $field;\n}",
            "title": "Category as options for dropdown/select/multiselect"
        },
        {
            "location": "/howto/#add-red-asterisk-to-all-required-fields",
            "text": "add_filter( 'user_meta_field_config', 'user_meta_field_config_add_asterisk', 10, 3 );\nfunction user_meta_field_config_add_asterisk( $field, $fieldID, $formName ){     \n    if( !empty($field['required']) || in_array($field['field_type'], array('user_login', 'user_email')) ){\n        if( !empty( $field['field_title'] ) )\n            $field['field_title'] .= '<span class=\"um_required\">*</span>';\n    }\n\n    return $field;\n}",
            "title": "Add red asterisk(*) to all required fields"
        },
        {
            "location": "/howto/#add-custom-required-class-to-all-required-fields",
            "text": "add_filter( 'user_meta_field_config', 'user_meta_field_config_add_class', 10, 3 );\nfunction user_meta_field_config_add_class( $field, $fieldID, $formName ){     \n    if( !empty($field['required']) || in_array($field['field_type'], array('user_login', 'user_email')) ){\n        $field['field_class'] = 'your_required_class '; // leave an empty space after classname\n    }\n\n    return $field;\n}",
            "title": "Add custom required class to all required fields"
        },
        {
            "location": "/howto/#change-resetpass-page",
            "text": "To change default \u201cresetpass\u201d to \u201cverify\u201d put following codes to your  functions.php  add_filter('user_meta_front_execution_page', create_function('','return \"verify\";'));",
            "title": "Change resetpass page"
        },
        {
            "location": "/howto/#customize-label-for-login-form",
            "text": "To customize default label for login form, edit and put following code to your  functions.php  file:  add_filter( 'user_meta_default_login_form', 'user_meta_default_login_form_function' );\nfunction user_meta_default_login_form_function( $config ){\n    $config['login_label']  = \"Your desire text for login input\";\n    $config['pass_label']   = \"Your desire text for password input\";\n    $config['remember_label'] = \"Your desire text for rember me checkbox\";\n    $config['button_value'] = \"Your desire text for login button\";\n\n    return $config;\n}",
            "title": "Customize label for login form"
        },
        {
            "location": "/howto/#redirection-after-profile-update",
            "text": "Put following code to  functions.php  for redirecting user after profile update.  add_action( 'user_meta_after_user_update', 'user_meta_after_user_update_function' );\nfunction user_meta_after_user_update_function( $response ){\n    global $userMeta;\n    echo $userMeta->jsRedirect( 'http://example.com' );\n}",
            "title": "Redirection after profile update"
        },
        {
            "location": "/howto/#extend-date-range",
            "text": "To extend date range from default one use following hooks:  add_filter( 'user_meta_field_config', 'user_meta_field_config_function', 10, 3 );\nfunction user_meta_field_config_function( $field, $fieldID, $formName ){\n    if( $fieldID != 0 ) // Replace 0 with your filed id\n        return $field;\n    $field['field_options'] = array( \"yearRange\"=>\"1900:c\" );\n    return $field;\n}  Please note, you need to change field id in this example, or you can use any other algorithm to filter your field.\nYou can pass more options to control the datepicker through  $field[\u2018field_options\u2019]  as an array.",
            "title": "Extend date range"
        },
        {
            "location": "/howto/#use-non-ajax-file-upload-field",
            "text": "If for any case, ajax file upload solution is not working for you, you can switch to non-ajax solution.\nTo choose non-ajax file upload, follow those steps:    Go to  User Meta >> Shared Fields , expand your file upload field (or avatar field) and check  Disable AJAX upload  checkbox, save your change.    Go to  User Meta >> Forms , expand your form and check  Do not use AJAX submit  checkbox and save your change.",
            "title": "Use non-ajax file upload field"
        },
        {
            "location": "/howto/#export-file-url-with-user-export",
            "text": "By default, UMP export relative path of file for exporting users into a csv file. To export file url, put following codes to  functions.php .  add_filter('user_meta_user_export_fields', function ($userData, $user) {\n    global $userMeta;\n\n    if (!empty($userData['user_avatar'])) {\n        $file = $userMeta->determinFileDir($userData['user_avatar']);\n\n        if ($file) {\n            $userData['user_avatar'] = $file['url'];\n            // For full path, use:\n            // $userData['user_avatar'] = $file['path'];\n        }\n    }\n\n    return $userData;\n}, 10, 2);  Note:  Required version 1.2 or above.",
            "title": "Export file url with user export"
        }
    ]
}